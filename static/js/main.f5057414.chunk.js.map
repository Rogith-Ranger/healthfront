{"version":3,"sources":["patient.js","hadmin.js","ladmin.js","insurance.js","index.js"],"names":["ipfs","require","ipfsClient","host","port","protocol","Patient","props","_this","Object","_home_rogith_Desktop_HealthCare_Insurance_Ethereum_Web_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_home_rogith_Desktop_HealthCare_Insurance_Ethereum_Web_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_rogith_Desktop_HealthCare_Insurance_Ethereum_Web_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","captureFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","handleClick","bind","_home_rogith_Desktop_HealthCare_Insurance_Ethereum_Web_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_7__","handlePersonalClick","handleFileClick","state","recID","pname","dDate","hname","price","message","records","precords","bloodgroup","dob","patientName","mnum","isDetailsFilled","imageHash","canSubmit","ethereum","enable","loadWeb3","loadBlockchainData","web3","Web3","currentProvider","alert","eth","getAccounts","accounts","account","net","getId","networkId","networkData","HealthCare","networks","health","Contract","abi","address","methods","recordCount","recordArr","record","i","recordsArr","push","length","_records","precord","_precords","isValue","_this2","getCoinbase","err","newRecord","send","from","then","fileInput","value","add","hash","path","_this3","_this4","newPatientRecord","_this5","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","className","method","autoComplete","type","onChange","placeholder","onClick","ref","class","disabled","map","console","log","pAddr","ID","testName","date","hospitalName","href","concat","signatureCount","isApproved","mobileNum","React","Component","Hadmin","classCallCheck","possibleConstructorReturn","getPrototypeOf","assertThisInitialized","signRecord","react_default","Labadmin","Insurance","handleApprove","handleReject","id","ApproveBill","RejectBill","FullApp","BrowserRouter","style","color","backgroundColor","Route","exact","component","App","user","password","login","Redirect","to","maxWidth","margin","selected","e","ReactDOM","render","src_FullApp","document","getElementById"],"mappings":"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","file":"static/js/main.f5057414.chunk.js","sourcesContent":["import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\nimport HealthCare from \"./contracts/HealthCare.json\";\r\nimport Web3 from 'web3'\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({host:'ipfs.infura.io',port:5001,protocol:'https'})\r\n\r\nexport default class Patient extends React.Component {\r\n  async componentWillMount() {\r\n    window.ethereum.enable();\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n  }\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = HealthCare.networks[networkId]\r\n    if(networkData) {\r\n      this.health = new web3.eth.Contract(HealthCare.abi, networkData.address)\r\n      const recordCount = await this.health.methods.recordCount().call()\r\n      let recordArr = [];\r\n      let record = [];\r\n      for(let i=0;i<recordCount;i++)\r\n      {\r\n        recordArr.push(await this.health.methods.recordsArr(i).call())\r\n      }\r\n      for(let i=0;i<recordArr.length;i++)\r\n      {\r\n        record.push(await this.health.methods._records(recordArr[i]).call())  \r\n      }\r\n      this.setState({records:record})\r\n      let precord = [];\r\n      precord.push(await this.health.methods._precords(this.state.account).call())   \r\n      this.setState({precords:precord})\r\n      this.setState({isDetailsFilled:this.state.precords[0].isValue})\r\n    }\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handlePersonalClick = this.handlePersonalClick.bind(this);\r\n    this.handleFileClick = this.handleFileClick.bind(this);\r\n    this.state = {\r\n      recID: \"\",\r\n      pname: \"\",\r\n      dDate: \"\",\r\n      hname: \"\",\r\n      price: \"\",\r\n      message: \"\",\r\n      records:[],\r\n      precords:[],\r\n      bloodgroup:\"\",\r\n      dob:\"\",\r\n      patientName:\"\",\r\n      mnum:\"\",\r\n      isDetailsFilled:false,\r\n      buffer: null,\r\n      imageHash:null,\r\n      canSubmit:true\r\n    };\r\n  }\r\n\r\n  handleClick(event) {\r\n    event.preventDefault();\r\n    window.web3.eth.getCoinbase((err, account) => {\r\n    this.setState({account:account})\r\n    this.health.methods.newRecord(\r\n        this.state.recID,\r\n        this.state.pname,\r\n        this.state.dDate,\r\n        this.state.hname,\r\n        this.state.price,\r\n        this.state.imageHash\r\n        ).send({ from: account}).then(()=>{ this.setState({ message: \"Record created\" });  this.loadBlockchainData(); \r\n        this.setState({\r\n        recID: \"\",\r\n        pname: \"\",\r\n        dDate: \"\",\r\n        hname: \"\",\r\n        price: \"\",\r\n        imageHash:null,\r\n        canSubmit:true\r\n      })\r\n      this.fileInput.value=\"\"\r\n    });\r\n      })\r\n    }\r\n\r\n async handleFileClick(event){\r\n    event.preventDefault();\r\n    const hash = await ipfs.add(this.state.buffer)\r\n    this.setState({imageHash:hash.path},()=>{alert(\"File upload complete!\");this.setState({canSubmit:false})})\r\n  }\r\n  handlePersonalClick(event) {\r\n    event.preventDefault();\r\n    window.web3.eth.getCoinbase((err, account) => {\r\n      this.setState({account})\r\n    this.health.methods.newPatientRecord(\r\n        this.state.patientName,\r\n        this.state.dob,\r\n        this.state.mnum,\r\n        this.state.bloodgroup).send({ from: account}).then(()=>{ this.setState({ message: \"Record created\" });  this.loadBlockchainData();\r\n      this.setState({\r\n        bloodgroup:\"\",\r\n        dob:\"\",\r\n        patientName:\"\",\r\n        mnum:\"\"\r\n      })\r\n      });\r\n      })\r\n    }\r\n\r\n    captureFile = (event) => {\r\n      event.preventDefault()\r\n      const file = event.target.files[0];\r\n      const reader = new window.FileReader()\r\n      reader.readAsArrayBuffer(file)\r\n      reader.onloadend = () => {\r\n        this.setState({ buffer:Buffer(reader.result) })\r\n      }\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container container-fluid login-conatiner\">\r\n        <div className=\"col-md-4\">\r\n          {this.state.isDetailsFilled ? null:\r\n        <div className=\"login-form\">\r\n            <form method=\"post\" autoComplete=\"off\">\r\n              <h2 className=\"text-center\">Personal Details</h2>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.patientName}\r\n                  onChange={event =>\r\n                    this.setState({ patientName: event.target.value })\r\n                  }\r\n                  className=\"form-control\"\r\n                  placeholder=\"Name\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"Date\"\r\n                  value={this.state.dob}\r\n                  onChange={event =>\r\n                    this.setState({ dob: event.target.value })\r\n                  }\r\n                  className=\"form-control\"\r\n                  placeholder=\"Date of Birth\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.mnum}\r\n                  onChange={event =>\r\n                    this.setState({ mnum: event.target.value })\r\n                  }\r\n                  className=\"form-control\"\r\n                  placeholder=\"Mobile Number\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.bloodgroup}\r\n                  onChange={event =>\r\n                    this.setState({ bloodgroup: event.target.value })\r\n                  }\r\n                  className=\"form-control\"\r\n                  placeholder=\"Blood Group\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <button\r\n                  className=\"btn btn-primary btn-block\"\r\n                  onClick={this.handlePersonalClick}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n              {this.state.message && (\r\n                <p className=\"alert alert-danger fade in\">\r\n                  {this.state.message}\r\n                </p>\r\n              )}\r\n              <div className=\"clearfix\" />\r\n            </form>\r\n          </div>}\r\n          <div className=\"login-form\">\r\n            <form method=\"post\" autoComplete=\"off\">\r\n              <h2 className=\"text-center\">Bill Details</h2>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.recID}\r\n                  onChange={event =>\r\n                    this.setState({ recID: event.target.value })\r\n                  }\r\n                  className=\"form-control\"\r\n                  placeholder=\"ID\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.pname}\r\n                  onChange={event =>\r\n                    this.setState({ pname: event.target.value })\r\n                  }\r\n                  className=\"form-control\"\r\n                  placeholder=\"Test Name\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"Date\"\r\n                  value={this.state.dDate}\r\n                  onChange={event =>\r\n                    this.setState({ dDate: event.target.value })\r\n                  }\r\n                  className=\"form-control\"\r\n                  placeholder=\"Date\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.hname}\r\n                  onChange={event =>\r\n                    this.setState({ hname: event.target.value })\r\n                  }\r\n                  className=\"form-control\"\r\n                  placeholder=\"Hospital Name\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.price}\r\n                  onChange={event =>\r\n                    this.setState({ price: event.target.value })\r\n                  }\r\n                  className=\"form-control\"\r\n                  placeholder=\"Price\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"file\"\r\n                  ref={ref=> this.fileInput = ref}\r\n                  onChange={this.captureFile}\r\n                  className=\"form-control\"\r\n                />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                <input type=\"button\" class = \"btn btn-primary\" onClick={this.handleFileClick} value=\"Upload\"/>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <button\r\n                  className=\"btn btn-primary btn-block\"\r\n                  onClick={this.handleClick} disabled={this.state.canSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n              {this.state.message && (\r\n                <p className=\"alert alert-danger fade in\">\r\n                  {this.state.message}\r\n                </p>\r\n              )}\r\n              <div className=\"clearfix\" />\r\n            </form>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-md-6 col-md-offset-2\">\r\n          <div className=\"c-list\">\r\n            <h2 className=\"text-center\">Bill Records</h2>\r\n            <table class=\"table table-bordered table-dark table-striped table-hover\">\r\n              <thead>\r\n              <tr>\r\n                  <th>ID</th>\r\n                  <th>Test Name</th>\r\n                  <th>Date</th>\r\n                  <th>Hospital Name</th>\r\n                  <th>Price</th>\r\n                  <th>Bill Document</th>\r\n                  <th>Admins Approval</th>\r\n                  <th>Insurance Claim status</th>\r\n              </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.records.map((record)=>{\r\n                  console.log(record)\r\n                 return(record.pAddr === this.state.account ?\r\n                   <tr>\r\n                     <td>{record.ID}</td>\r\n                     <td>{record.testName}</td>\r\n                     <td>{record.date}</td>\r\n                     <td>{record.hospitalName}</td>\r\n                     <td>{record.price}</td>\r\n                     <td><a href={`https:ipfs.infura.io/ipfs/${record.imageHash}`} target='_blank'>View Document</a></td>\r\n                     <td>({record.signatureCount}/2)</td>\r\n                     <td>{record.isApproved === \"1\" ?\"Approved\":record.isApproved === \"2\" ? \"Rejected\":\"Pending\"}</td>\r\n                   </tr>:null\r\n                 )\r\n                })}\r\n              </tbody>\r\n            </table>\r\n            <h2 className=\"text-center\">Personal Record</h2>\r\n            <table class=\"table table-bordered table-dark table-striped table-hover\">\r\n              <thead>\r\n              <tr>\r\n                  <th>Name</th>\r\n                  <th>Date of Birth</th>\r\n                  <th>Mobile Number</th>\r\n                  <th>Blood Group</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.precords.map((record)=>{\r\n                 return(\r\n                   <tr>\r\n                     <td>{record.patientName}</td>\r\n                     <td>{record.dob}</td>\r\n                     <td>{record.mobileNum}</td>\r\n                     <td>{record.bloodgroup}</td>\r\n                   </tr>\r\n                 ) \r\n                })}\r\n              </tbody>\r\n            </table>\r\n          \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\nimport HealthCare from \"./contracts/HealthCare.json\";\r\nimport Web3 from \"web3\";\r\nexport default class Hadmin extends React.Component {\r\n\r\n  async componentWillMount() {\r\n    window.ethereum.enable();\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n  }\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = HealthCare.networks[networkId]\r\n    if(networkData) {\r\n      this.health = new web3.eth.Contract(HealthCare.abi, networkData.address)\r\n      const recordCount = await this.health.methods.recordCount().call()\r\n      let recordArr = [];\r\n      let record = [];\r\n      for(let i=0;i<recordCount;i++)\r\n      {\r\n        recordArr.push(await this.health.methods.recordsArr(i).call())\r\n      }\r\n      for(let i=0;i<recordArr.length;i++)\r\n      {\r\n        record.push(await this.health.methods._records(recordArr[i]).call())  \r\n      }\r\n      this.setState({records:record})\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      recID: \"\",\r\n      message: \"\",\r\n      records:[]\r\n    };\r\n  }\r\n\r\n  async handleClick(event) {\r\n    event.preventDefault();\r\n    window.web3.eth.getCoinbase((err, account) => {\r\n      this.health.methods\r\n      .signRecord(this.state.recID)\r\n      .send({ from: account }).then(()=>{this.setState({ message: \"Record approved!\" }); this.loadBlockchainData();\r\n    this.setState({\r\n      recID: \"\"\r\n    })}); \r\n    })\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container container-fluid login-conatiner\">\r\n        <div className=\"col-md-4\">\r\n          <h3 className=\"text-center\">Hospital Admin</h3>\r\n          <div className=\"login-form\">\r\n            <h4 className=\"text-center\">Approve Medical Record</h4>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"number\"\r\n                value={this.state.recID}\r\n                onChange={event => this.setState({ recID: event.target.value })}\r\n                className=\"form-control\"\r\n                placeholder=\"ID\"\r\n              />\r\n              <br />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <button\r\n                className=\"btn btn-primary btn-block\"\r\n                onClick={this.handleClick}\r\n              >\r\n                Approve\r\n              </button>\r\n            </div>\r\n            {this.state.message && (\r\n              <p className=\"alert alert-danger fade in\">{this.state.message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6 col-md-offset-2\">\r\n          <div className=\"c-list\">\r\n            <h2 className=\"text-center\">Records</h2>\r\n            <table class=\"table table-bordered table-striped table-hover\">\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>Name</th>\r\n                  <th>Date</th>\r\n                  <th>Hospital Name</th>\r\n                  <th>Price</th>\r\n                  <th>Patient Bill Document</th>\r\n                  <th>Approved</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.records.map((record)=>{\r\n                 return(\r\n                   <tr>\r\n                     <td>{record.ID}</td>\r\n                     <td>{record.testName}</td>\r\n                     <td>{record.date}</td>\r\n                     <td>{record.hospitalName}</td>\r\n                     <td>{record.price}</td>\r\n                     <td><a href={`https:ipfs.infura.io/ipfs/${record.imageHash}`} target='_blank'>View Document</a></td>\r\n                     <td>({record.signatureCount}/2)</td>\r\n                   </tr>\r\n                 ) \r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\nimport HealthCare from \"./contracts/HealthCare.json\";\r\nimport Web3 from \"web3\";\r\n\r\nexport default class Labadmin extends React.Component {\r\n  async componentWillMount() {\r\n    window.ethereum.enable();\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n  }\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = HealthCare.networks[networkId]\r\n    if(networkData) {\r\n      this.health = new web3.eth.Contract(HealthCare.abi, networkData.address)\r\n      const recordCount = await this.health.methods.recordCount().call()\r\n      let recordArr = [];\r\n      let record = [];\r\n      for(let i=0;i<recordCount;i++)\r\n      {\r\n        recordArr.push(await this.health.methods.recordsArr(i).call())\r\n      }\r\n      for(let i=0;i<recordArr.length;i++)\r\n      {\r\n        record.push(await this.health.methods._records(recordArr[i]).call())  \r\n      }\r\n      this.setState({records:record})\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      recID: \"\",\r\n      message: \"\",\r\n      records:[]\r\n    };\r\n  }\r\n  async handleClick(event) {\r\n    event.preventDefault();\r\n    window.web3.eth.getCoinbase((err, account) => {\r\n      this.health.methods\r\n      .signRecord(this.state.recID)\r\n      .send({ from: account }).then(()=>{this.setState({ message: \"Record approved!\" });this.loadBlockchainData();\r\n    this.setState({\r\n      recID: \"\"\r\n    })}); \r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container container-fluid login-conatiner\">\r\n        <div className=\"col-md-4\">\r\n          <h3 className=\"text-center\">Lab Admin</h3>\r\n          <div className=\"login-form\">\r\n            <h4>Approve Medical Record</h4>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"Number\"\r\n                value={this.state.recID}\r\n                onChange={event => this.setState({ recID: event.target.value })}\r\n                className=\"form-control\"\r\n                placeholder=\"Input\"\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <button\r\n                className=\"btn btn-primary btn-block\"\r\n                onClick={this.handleClick}\r\n              >\r\n                Approve\r\n              </button>\r\n            </div>\r\n            {this.state.message && (\r\n              <p className=\"alert alert-danger fade in\">{this.state.message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6 col-md-offset-2\">\r\n          <div className=\"c-list\">\r\n            <h2 className=\"text-center\">Records</h2>\r\n            <table class=\"table table-bordered table-striped table-hover\">\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>Name</th>\r\n                  <th>Date</th>\r\n                  <th>Hospital Name</th>\r\n                  <th>Price</th>\r\n                  <th>Patient Bill Document</th>\r\n                  <th>Approved</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.records.map((record)=>{\r\n                 return(\r\n                   <tr>\r\n                     <td>{record.ID}</td>\r\n                     <td>{record.testName}</td>\r\n                     <td>{record.date}</td>\r\n                     <td>{record.hospitalName}</td>\r\n                     <td>{record.price}</td>\r\n                     <td><a href={`https:ipfs.infura.io/ipfs/${record.imageHash}`} target='_blank'>View Document</a></td>\r\n                     <td>({record.signatureCount}/2)</td>\r\n                   </tr>\r\n                 ) \r\n                })}\r\n              </tbody>\r\n\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n//import './insurance.css';\r\nimport HealthCare from \"./contracts/HealthCare.json\";\r\nimport Web3 from \"web3\";\r\n\r\n export default class Insurance extends React.Component{\r\n  async componentWillMount() {\r\n    window.ethereum.enable();\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n  }\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = HealthCare.networks[networkId]\r\n    if(networkData) {\r\n      this.health = new web3.eth.Contract(HealthCare.abi, networkData.address)\r\n      const recordCount = await this.health.methods.recordCount().call()\r\n      let recordArr = [];\r\n      let record = [];\r\n      for(let i=0;i<recordCount;i++)\r\n      {\r\n        recordArr.push(await this.health.methods.recordsArr(i).call())\r\n      }\r\n      for(let i=0;i<recordArr.length;i++)\r\n      {\r\n        record.push(await this.health.methods._records(recordArr[i]).call())  \r\n      }\r\n      this.setState({records:record})\r\n    }\r\n  }\r\n\r\n  handleApprove(event){\r\n    event.preventDefault();\r\n    let id = event.target.value;\r\n    window.web3.eth.getCoinbase((err, account) => {\r\n      this.setState({account:account})\r\n      this.health.methods.ApproveBill(id).send({ from: account}).then(()=>{this.loadBlockchainData()});\r\n        })\r\n  }\r\n  \r\n  handleReject(event){\r\n    event.preventDefault();\r\n    let id = event.target.value;\r\n    window.web3.eth.getCoinbase((err, account) => {\r\n      this.setState({account:account})\r\n      this.health.methods.RejectBill(id).send({ from: account}).then(()=>{this.loadBlockchainData()});\r\n        })\r\n  }\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.handleApprove = this.handleApprove.bind(this);\r\n    this.handleReject = this.handleReject.bind(this);\r\n    this.state = {\r\n      records:[]\r\n    };\r\n  }\r\n   render(){\r\n     return(\r\n      <div className=\"col-md-12\">\r\n      <h3  className=\"text-center\">Insurance Page</h3>\r\n      <div className=\"c-list\">\r\n      <h2 className=\"text-center\">Approved Records</h2>\r\n        <table class=\"table table-bordered table-striped table-hover\">\r\n        <thead>\r\n             <tr>\r\n                <th>ID</th>\r\n                <th>Test Name</th>\r\n                <th>Date</th>\r\n                <th>Hospital Name</th>\r\n                <th>Price</th>\r\n                <th>Admins Approval</th>\r\n                <th></th>\r\n             </tr>\r\n             </thead>\r\n             <tbody>\r\n                {this.state.records.map((record)=>{\r\n                 return(record.signatureCount===\"2\" && record.isApproved === \"0\" ?\r\n                   <tr>\r\n                     <td>{record.ID}</td>\r\n                     <td>{record.testName}</td>\r\n                     <td>{record.date}</td>\r\n                     <td>{record.hospitalName}</td>\r\n                     <td>{record.price}</td>\r\n                     <td>({record.signatureCount}/2) Approved</td>\r\n                     <td><button type=\"button\" value={record.ID} class=\"btn btn-success\" onClick={this.handleApprove}>Approve</button>  <button class=\"btn btn-danger\" type=\"button\" value={record.ID} onClick={this.handleReject}>Reject</button></td>\r\n                   </tr>:null\r\n                 ) \r\n                })}\r\n             </tbody>\r\n          </table>\r\n         </div>\r\n       </div>\r\n     );\r\n   }\r\n }\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Route,Redirect } from \"react-router-dom\";\r\nimport Patient from './patient'\r\nimport Hadmin from './hadmin'\r\nimport Labadmin from './ladmin'\r\nimport Insurance from './insurance'\r\nimport './index.css'\r\n//import HealthCare from './HealthCare'\r\nconst FullApp = () => (\r\n  <Router>\r\n    <div>\r\n    <header className=\"App-header\">\r\n          <h1 className=\"App-title text-center\">HealthCare Insurance</h1>\r\n          <a href=\"/\"><input type=\"button\" value=\"Home\" class=\"btn btn-primary\" style={{color:\"white\",backgroundColor:\"rgb(103, 3, 143)\"}}/></a>\r\n    </header>\r\n      <Route exact path=\"/\" component={App} />\r\n      <Route path=\"/patient\" component={Patient} />\r\n      <Route path=\"/hadmin\" component={Hadmin} />\r\n      <Route path=\"/labadmin\" component={Labadmin} />\r\n      <Route path=\"/insurance\" component={Insurance} />\r\n\r\n    </div>\r\n  </Router>\r\n);\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user:'',\r\n      password:'',\r\n      login:false\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    window.ethereum.enable();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container container-fluid login-conatiner\">\r\n      {this.state.login ? this.state.user === \"\" ? this.state.password === \"patient\"? <Redirect to=\"/patient\" /> :\r\nthis.state.password === \"hadmin\" ?<Redirect to=\"/hadmin\" /> :\r\nthis.state.password === \"labadmin\"? <Redirect to=\"/labadmin\" />:\r\nthis.state.password === \"insurance\"? <Redirect to=\"/insurance\" />:null:null:null}\r\n<div style={{\r\n                    maxWidth: '300px',\r\n                    margin: '0 auto' }}>\r\n                    <div className=\"login-form\">\r\n                        <form method=\"post\">\r\n                        <h2 className=\"text-center\">Log in</h2>\r\n\r\n  <div className=\"form-group\">\r\n\r\n          <select id=\"selection\"  className=\"form-control\">\r\n            <option selected>Select Mode..</option>\r\n            <option>Patient</option>\r\n            <option>Hospital Admin</option>\r\n            <option>Lab Admin</option>\r\n            <option>Insurance Company</option>\r\n          </select>\r\n</div>\r\n<div className=\"form-group\">\r\n\r\n          <input type=\"password\"  className=\"form-control\" placeholder=\"Password\" onChange={e => this.setState({password:e.target.value})}  ></input></div>\r\n          <div className=\"form-group\">\r\n\r\n          <button className=\"btn btn-success btn-block but\" onClick={()=> this.setState({login:true})} >Submit</button></div>\r\n          <div className=\"clearfix\">\r\n                            </div>\r\n                        </form>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<FullApp />, document.getElementById('root'));\r\n"],"sourceRoot":""}